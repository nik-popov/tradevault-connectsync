name: Alembic Migrations

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
    paths:
      - 'backend/app/models/**'
      - 'backend/alembic.ini'
      - 'backend/alembic/**'
      - 'backend/pyproject.toml'
      - 'backend/uv.lock'
  workflow_call:
    inputs:
      postgres_user:
        required: true
        type: string
      postgres_password:
        required: true
        type: string
      postgres_db:
        required: true
        type: string

jobs:
  alembic-migrations:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: ${{ inputs.postgres_user || 'postgres' }}
          POSTGRES_PASSWORD: ${{ inputs.postgres_password || 'password' }}
          POSTGRES_DB: ${{ inputs.postgres_db || 'app_db' }}
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    env:
      DATABASE_URL: postgresql://${{ inputs.postgres_user || 'postgres' }}:${{ inputs.postgres_password || 'password' }}@postgres:5432/${{ inputs.postgres_db || 'app_db' }}
      PROJECT_NAME: dev-tradevault
      POSTGRES_SERVER: postgres
      POSTGRES_USER: ${{ inputs.postgres_user || 'postgres' }}
      POSTGRES_DB: ${{ inputs.postgres_db || 'app_db' }}
      FIRST_SUPERUSER: admin
      FIRST_SUPERUSER_PASSWORD: adminpassword
      PROJECT_NAME_ENV: tradevault

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Debug repository structure
        run: |
          echo "Repository root:"
          ls -R .
          echo "Backend directory:"
          ls -R backend || echo "backend/ not found"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build backend image
        run: docker build -t ${{ env.PROJECT_NAME }}-backend:latest ./backend

      - name: Debug Python environment
        run: |
          docker run --rm \
            --network ${{ job.services.postgres.network }} \
            -e SQLALCHEMY_DATABASE_URI="${{ env.DATABASE_URL }}" \
            -e POSTGRES_SERVER="${{ env.POSTGRES_SERVER }}" \
            -e POSTGRES_USER="${{ env.POSTGRES_USER }}" \
            -e POSTGRES_DB="${{ env.POSTGRES_DB }}" \
            -e FIRST_SUPERUSER="${{ env.FIRST_SUPERUSER }}" \
            -e FIRST_SUPERUSER_PASSWORD="${{ env.FIRST_SUPERUSER_PASSWORD }}" \
            -e PROJECT_NAME="${{ env.PROJECT_NAME_ENV }}" \
            ${{ env.PROJECT_NAME }}-backend:latest \
            bash -c "echo 'Python version:' && python --version && \
                     echo 'Pip list:' && pip list && \
                     echo 'Directory structure:' && ls -R /app && \
                     echo 'Python path:' && python -c 'import sys; print(sys.path)' && \
                     echo 'Trying to import app.models:' && python -c 'from app.models import SQLModel' && \
                     echo 'Trying to import settings:' && python -c 'from app.core.config import settings; print(settings.SQLALCHEMY_DATABASE_URI)' && \
                     echo 'Environment variables:' && env | grep -E 'SQLALCHEMY|POSTGRES'"

      - name: Test database connection
        run: |
          docker run --rm \
            --network ${{ job.services.postgres.network }} \
            -e SQLALCHEMY_DATABASE_URI="${{ env.DATABASE_URL }}" \
            ${{ env.PROJECT_NAME }}-backend:latest \
            bash -c "python -c 'from sqlalchemy import create_engine; engine = create_engine(\"${{ env.DATABASE_URL }}\"); conn = engine.connect(); print(\"Connected successfully\"); conn.close()'"

      - name: Debug inputs and prepare Alembic configuration
        run: |
          docker run --rm \
            --network ${{ job.services.postgres.network }} \
            -e SQLALCHEMY_DATABASE_URI="${{ env.DATABASE_URL }}" \
            -e POSTGRES_SERVER="${{ env.POSTGRES_SERVER }}" \
            -e POSTGRES_USER="${{ env.POSTGRES_USER }}" \
            -e POSTGRES_DB="${{ env.POSTGRES_DB }}" \
            -e FIRST_SUPERUSER="${{ env.FIRST_SUPERUSER }}" \
            -e FIRST_SUPERUSER_PASSWORD="${{ env.FIRST_SUPERUSER_PASSWORD }}" \
            -e PROJECT_NAME="${{ env.PROJECT_NAME_ENV }}" \
            ${{ env.PROJECT_NAME }}-backend:latest \
            bash -c "echo 'Debug: POSTGRES_USER=${{ env.POSTGRES_USER }}' && \
                     echo 'Debug: POSTGRES_DB=${{ env.POSTGRES_DB }}' && \
                     echo 'Debug: POSTGRES_SERVER=${{ env.POSTGRES_SERVER }}' && \
                     echo 'Debug: FIRST_SUPERUSER=${{ env.FIRST_SUPERUSER }}' && \
                     echo 'Debug: PROJECT_NAME=${{ env.PROJECT_NAME_ENV }}' && \
                     echo 'Debug: SQLALCHEMY_DATABASE_URI=$SQLALCHEMY_DATABASE_URI' && \
                     printf '[alembic]\nscript_location = app/alembic\nsqlalchemy.url = postgresql://postgres:password@postgres:5432/app_db\n' > /app/alembic.ini && \
                     mkdir -p /app/app/alembic/versions && \
                     echo -e 'import os\nfrom alembic import context\nfrom app.models import SQLModel\n\ntarget_metadata = SQLModel.metadata\n\ndef run_migrations_offline() -> None:\n    url = \"postgresql://postgres:password@postgres:5432/app_db\"\n    context.configure(\n        url=url,\n        target_metadata=target_metadata,\n        literal_binds=True,\n        compare_type=True,\n    )\n    with context.begin_transaction():\n        context.run_migrations()\n\ndef run_migrations_online() -> None:\n    from sqlalchemy import create_engine\n    connectable = create_engine(\"postgresql://postgres:password@postgres:5432/app_db\")\n    with connectable.connect() as connection:\n        context.configure(\n            connection=connection,\n            target_metadata=target_metadata,\n            compare_type=True,\n        )\n        with context.begin_transaction():\n            context.run_migrations()\n\nif context.is_offline_mode():\n    run_migrations_offline()\nelse:\n    run_migrations_online()' > /app/app/alembic/env.py && \
                     echo 'Listing /app contents:' && ls -la /app && \
                     echo 'Listing /app/app contents:' && ls -la /app/app && \
                     echo 'Listing /app/app/alembic contents:' && ls -la /app/app/alembic && \
                     echo 'Content of alembic.ini:' && cat /app/alembic.ini && \
                     echo 'Content of env.py:' && cat /app/app/alembic/env.py"

      - name: Run migrations in container
        run: |
          docker run --rm \
            --network ${{ job.services.postgres.network }} \
            -e SQLALCHEMY_DATABASE_URI="${{ env.DATABASE_URL }}" \
            -e POSTGRES_SERVER="${{ env.POSTGRES_SERVER }}" \
            -e POSTGRES_USER="${{ env.POSTGRES_USER }}" \
            -e POSTGRES_DB="${{ env.POSTGRES_DB }}" \
            -e FIRST_SUPERUSER="${{ env.FIRST_SUPERUSER }}" \
            -e FIRST_SUPERUSER_PASSWORD="${{ env.FIRST_SUPERUSER_PASSWORD }}" \
            -e PROJECT_NAME="${{ env.PROJECT_NAME_ENV }}" \
            ${{ env.PROJECT_NAME }}-backend:latest \
            bash -c "echo 'Debug: SQLALCHEMY_DATABASE_URI=$SQLALCHEMY_DATABASE_URI' && \
                     if ! command -v alembic >/dev/null 2>&1; then pip install alembic; fi && \
                     cat /app/alembic.ini && \
                     alembic revision --autogenerate -m 'Auto-generated migration for model changes'"

      - name: Check for uncommitted migrations
        id: check_migrations
        run: |
          if git diff --name-only | grep '^backend/app/alembic/versions/'; then
            echo "New migration files detected"
            echo "has_migrations=true" >> $GITHUB_OUTPUT
          else
            echo "No new migration files"
            echo "has_migrations=false" >> $GITHUB_OUTPUT
          fi

      - name: Commit new migration files
        if: steps.check_migrations.outputs.has_migrations == 'true' && github.event_name == 'push'
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add backend/app/alembic/versions/*
          git commit -m "Add auto-generated Alembic migration"
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}