name: Deploy to Staging

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  alembic-migrations:
    uses: ./.github/workflows/alembic-migrations.yml
    with:
      postgres_user: ${{ env.POSTGRES_USER }}
      postgres_password: ${{ env.POSTGRES_PASSWORD }}
      postgres_db: ${{ env.POSTGRES_DB }}
    env:
      POSTGRES_USER: "staging_user"           # New credential
      POSTGRES_PASSWORD: "staging_pass_2025"  # New credential
      POSTGRES_DB: "staging_db"               # New credential

  deploy:
    runs-on: ubuntu-latest
    needs: alembic-migrations
    env:
      ENVIRONMENT: staging

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up SSH
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > private_key
          chmod 600 private_key
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts
          chmod 600 ~/.ssh/known_hosts

      - name: Clean remote shell environment
        run: |
          ssh -i private_key -q ubuntu@${{ secrets.EC2_HOST }} "
            echo -e '# Exit if non-interactive\n[[ \\$- != *i* ]] && return' > /home/ubuntu/.bashrc &&
            rm -f /home/ubuntu/.bash_profile &&
            sudo truncate -s 0 /etc/motd
          "

      - name: Ensure Docker and tools installed
        run: |
          ssh -i private_key -q ubuntu@${{ secrets.EC2_HOST }} "
            sudo apt-get update &&
            sudo apt-get install -y rsync curl iproute2 &&
            sudo apt-get remove -y docker.io docker-ce docker-ce-cli containerd.io || true &&
            curl -fsSL https://get.docker.com -o get-docker.sh &&
            sudo sh get-docker.sh &&
            sudo systemctl start docker &&
            sudo systemctl enable docker &&
            sudo usermod -aG docker ubuntu &&
            sudo mkdir -p /usr/libexec/docker/cli-plugins &&
            sudo curl -SL https://github.com/docker/compose/releases/download/v2.24.7/docker-compose-linux-x86_64 -o /usr/libexec/docker/cli-plugins/docker-compose &&
            sudo chmod +x /usr/libexec/docker/cli-plugins/docker-compose &&
            echo '{\"features\":{\"buildkit\":true}}' | sudo tee /etc/docker/daemon.json &&
            sudo systemctl restart docker
          "

      - name: Debug remote environment
        run: |
          ssh -i private_key -q ubuntu@${{ secrets.EC2_HOST }} "
            bash --noprofile --norc -c 'echo TEST' &&
            rsync --version &&
            docker --version &&
            docker compose version &&
            groups ubuntu &&
            docker network ls &&
            ls -la /home/ubuntu/app || echo 'Directory /home/ubuntu/app does not exist' &&
            cat /home/ubuntu/app/docker-compose.yml || echo 'docker-compose.yml not found' &&
            cat /home/ubuntu/app/.env || echo '.env not found'
          "

      - name: Deploy to EC2
        env:
          POSTGRES_USER: "staging_user"           # New credential
          POSTGRES_PASSWORD: "staging_pass_2025"  # New credential
          POSTGRES_DB: "staging_db"               # New credential
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          FIRST_SUPERUSER: ${{ secrets.FIRST_SUPERUSER }}
          FIRST_SUPERUSER_PASSWORD: ${{ secrets.FIRST_SUPERUSER_PASSWORD }}
          STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY }}
          DOMAIN: ${{ secrets.DOMAIN }}
          STACK_NAME: ${{ secrets.STACK_NAME }}
          DOCKER_IMAGE_BACKEND: ${{ secrets.DOCKER_IMAGE_BACKEND }}
          DOCKER_IMAGE_FRONTEND: ${{ secrets.DOCKER_IMAGE_FRONTEND }}
          FRONTEND_HOST: ${{ secrets.FRONTEND_HOST }}
          SMTP_HOST: ${{ secrets.SMTP_HOST }}
          SMTP_USER: ${{ secrets.SMTP_USER }}
          SMTP_PASSWORD: ${{ secrets.SMTP_PASSWORD }}
          EMAILS_FROM_EMAIL: ${{ secrets.EMAILS_FROM_EMAIL }}
          BACKEND_CORS_ORIGINS: ${{ secrets.BACKEND_CORS_ORIGINS }}
          SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
        run: |
          rsync -avz --delete -e "ssh -i private_key -q -o UserKnownHostsFile=~/.ssh/known_hosts" \
            ./ ubuntu@${{ secrets.EC2_HOST }}:/home/ubuntu/app
          ssh -i private_key -q ubuntu@${{ secrets.EC2_HOST }} "
            cd /home/ubuntu/app &&
            docker network create traefik-public || true &&
            echo 'POSTGRES_USER=${{ env.POSTGRES_USER }}' > .env &&
            echo 'POSTGRES_PASSWORD=${{ env.POSTGRES_PASSWORD }}' >> .env &&
            echo 'POSTGRES_PORT=5432' >> .env &&
            echo 'POSTGRES_DB=${{ env.POSTGRES_DB }}' >> .env &&
            echo 'POSTGRES_SERVER=db' >> .env &&
            echo 'PROJECT_NAME=dev-tradevault' >> .env &&
            echo 'SECRET_KEY=${{ secrets.SECRET_KEY }}' >> .env &&
            echo 'FIRST_SUPERUSER=${{ secrets.FIRST_SUPERUSER }}' >> .env &&
            echo 'FIRST_SUPERUSER_PASSWORD=${{ secrets.FIRST_SUPERUSER_PASSWORD }}' >> .env &&
            echo 'STRIPE_SECRET_KEY=${{ secrets.STRIPE_SECRET_KEY }}' >> .env &&
            echo 'DOMAIN=${{ secrets.DOMAIN }}' >> .env &&
            echo 'STACK_NAME=dev-tradevault' >> .env &&
            echo 'DOCKER_IMAGE_BACKEND=${{ secrets.DOCKER_IMAGE_BACKEND }}' >> .env &&
            echo 'DOCKER_IMAGE_FRONTEND=${{ secrets.DOCKER_IMAGE_FRONTEND }}' >> .env &&
            echo 'FRONTEND_HOST=${{ secrets.FRONTEND_HOST }}' >> .env &&
            echo 'SMTP_HOST=${{ secrets.SMTP_HOST }}' >> .env &&
            echo 'SMTP_USER=${{ secrets.SMTP_USER }}' >> .env &&
            echo 'SMTP_PASSWORD=${{ secrets.SMTP_PASSWORD }}' >> .env &&
            echo 'EMAILS_FROM_EMAIL=${{ secrets.EMAILS_FROM_EMAIL }}' >> .env &&
            echo 'BACKEND_CORS_ORIGINS=${{ secrets.BACKEND_CORS_ORIGINS }}' >> .env &&
            echo 'SENTRY_DSN=${{ secrets.SENTRY_DSN }}' >> .env &&
            echo 'ENVIRONMENT=staging' >> .env &&
            echo 'Cleaning up old containers and checking ports...' &&
            docker ps -a &&
            docker p